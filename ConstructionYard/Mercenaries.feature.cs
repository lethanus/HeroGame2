// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ConstructionYard
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Mercenaries", Description="\tManaging mercenaries for account", SourceFile="Mercenaries.feature", SourceLine=0)]
    public partial class MercenariesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Mercenaries.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Mercenaries", "\tManaging mercenaries for account", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01 Adding new mercenary to account", new string[] {
                "mytag"}, SourceLine=4)]
        public virtual void _01AddingNewMercenaryToAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 Adding new mercenary to account", null, new string[] {
                        "mytag"});
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table1.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 6
 testRunner.Given("Some accounts exists in system", ((string)(null)), table1, "Given ");
#line 9
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table2.AddRow(new string[] {
                        "Elf_A",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
            table2.AddRow(new string[] {
                        "Goblin_B",
                        "Goblin",
                        "10",
                        "10",
                        "5",
                        "5",
                        "0",
                        "5",
                        ""});
#line 10
 testRunner.And("Account \'ID_1\' already have some mercenaries", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table3.AddRow(new string[] {
                        "Elf_C",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
#line 14
 testRunner.When("Player will add new mercenary", ((string)(null)), table3, "When ");
#line 17
 testRunner.Then("Logged account id is \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table4.AddRow(new string[] {
                        "Elf_A",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
            table4.AddRow(new string[] {
                        "Goblin_B",
                        "Goblin",
                        "10",
                        "10",
                        "5",
                        "5",
                        "0",
                        "5",
                        ""});
            table4.AddRow(new string[] {
                        "Elf_C",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
#line 18
 testRunner.And("Logged account should have mercenaries", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02 Adding new mercenary to many accounts", SourceLine=25)]
        public virtual void _02AddingNewMercenaryToManyAccounts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 Adding new mercenary to many accounts", null, ((string[])(null)));
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table5.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
            table5.AddRow(new string[] {
                        "ID_2",
                        "test2",
                        "test2"});
#line 27
 testRunner.Given("Some accounts exists in system", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table6.AddRow(new string[] {
                        "Elf_A",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
            table6.AddRow(new string[] {
                        "Goblin_B",
                        "Goblin",
                        "10",
                        "10",
                        "5",
                        "5",
                        "0",
                        "5",
                        ""});
#line 31
 testRunner.And("Account \'ID_1\' already have some mercenaries", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table7.AddRow(new string[] {
                        "Elf_D",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
            table7.AddRow(new string[] {
                        "Goblin_E",
                        "Goblin",
                        "10",
                        "10",
                        "5",
                        "5",
                        "0",
                        "5",
                        ""});
#line 35
 testRunner.And("Account \'ID_2\' already have some mercenaries", ((string)(null)), table7, "And ");
#line 39
 testRunner.When("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table8.AddRow(new string[] {
                        "Elf_C",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
#line 40
 testRunner.And("Player will add new mercenary", ((string)(null)), table8, "And ");
#line 43
 testRunner.When("I try to login for \'test2\' and password \'test2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table9.AddRow(new string[] {
                        "Elf_X",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
#line 44
 testRunner.And("Player will add new mercenary", ((string)(null)), table9, "And ");
#line 47
 testRunner.Then("Logged account id is \'ID_2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table10.AddRow(new string[] {
                        "Elf_A",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
            table10.AddRow(new string[] {
                        "Goblin_B",
                        "Goblin",
                        "10",
                        "10",
                        "5",
                        "5",
                        "0",
                        "5",
                        ""});
            table10.AddRow(new string[] {
                        "Elf_C",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
#line 48
 testRunner.And("Account \'ID_1\' should have mercenaries", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table11.AddRow(new string[] {
                        "Elf_D",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
            table11.AddRow(new string[] {
                        "Goblin_E",
                        "Goblin",
                        "10",
                        "10",
                        "5",
                        "5",
                        "0",
                        "5",
                        ""});
            table11.AddRow(new string[] {
                        "Elf_X",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "10",
                        "5",
                        "10",
                        ""});
#line 53
 testRunner.And("Logged account should have mercenaries", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03 New mercenary should be created base on mercenary template", SourceLine=60)]
        public virtual void _03NewMercenaryShouldBeCreatedBaseOnMercenaryTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03 New mercenary should be created base on mercenary template", null, ((string[])(null)));
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Name",
                        "HP_range",
                        "Min_Attack_range",
                        "Defence_range",
                        "Speed_range",
                        "Attack_add_for_max"});
            table12.AddRow(new string[] {
                        "1",
                        "Goblin",
                        "18-22",
                        "8-12",
                        "8-12",
                        "8-10",
                        "4"});
            table12.AddRow(new string[] {
                        "2",
                        "Goblin",
                        "22-26",
                        "12-16",
                        "10-14",
                        "9-11",
                        "5"});
            table12.AddRow(new string[] {
                        "3",
                        "Goblin",
                        "26-34",
                        "16-24",
                        "12-16",
                        "10-12",
                        "7"});
            table12.AddRow(new string[] {
                        "4",
                        "Goblin",
                        "40-55",
                        "30-40",
                        "18-22",
                        "11-13",
                        "10"});
#line 62
 testRunner.Given("Some mercenary templates", ((string)(null)), table12, "Given ");
#line 68
 testRunner.When("Creating mercenary \'Goblin\' of level \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.Then("Created mercenary should have \'Hp\' between \'40\' and \'55\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.And("Created mercenary should have \'Attack_Min\' between \'30\' and \'40\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("Created mercenary should have \'Attack_Max\' between \'40\' and \'50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("Created mercenary should have \'Defence\' between \'18\' and \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("Created mercenary should have \'Speed\' between \'11\' and \'13\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("04 Generating potential recruits for level 1", SourceLine=75)]
        public virtual void _04GeneratingPotentialRecruitsForLevel1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04 Generating potential recruits for level 1", null, ((string[])(null)));
#line 76
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table13.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 77
 testRunner.Given("Some accounts exists in system", ((string)(null)), table13, "Given ");
#line 80
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Name",
                        "HP_range",
                        "Min_Attack_range",
                        "Defence_range",
                        "Speed_range",
                        "Attack_add_for_max"});
            table14.AddRow(new string[] {
                        "1",
                        "Goblin",
                        "18-22",
                        "8-12",
                        "8-12",
                        "8-10",
                        "4"});
            table14.AddRow(new string[] {
                        "2",
                        "Goblin",
                        "22-26",
                        "12-16",
                        "10-14",
                        "9-11",
                        "5"});
            table14.AddRow(new string[] {
                        "3",
                        "Goblin",
                        "26-34",
                        "16-24",
                        "12-16",
                        "10-12",
                        "7"});
            table14.AddRow(new string[] {
                        "4",
                        "Goblin",
                        "40-55",
                        "30-40",
                        "18-22",
                        "11-13",
                        "10"});
#line 81
 testRunner.And("Some mercenary templates", ((string)(null)), table14, "And ");
#line 87
 testRunner.And("Number of recruits is set to \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("The chance of getting level \'1\' mercenaries is set to \'100\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("Randomzer for mercenary level will always return \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.When("User will use refresh for mercenaries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("Count of potential recruits generated should be \'5\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.And("All potential recruits should have set \'Name\' to \'Goblin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("All potential recruits should have set \'Level\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And("All potential recruits should have set value of \'Hp\' between \'18\' and \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("All potential recruits should have set value of \'Attack_Min\' between \'8\' and \'12\'" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("All potential recruits should have set value of \'Attack_Max\' between \'12\' and \'16" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("All potential recruits should have set value of \'Defence\' between \'8\' and \'12\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("All potential recruits should have set value of \'Speed\' between \'8\' and \'10\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05 Generating potential recruits for level 2", SourceLine=100)]
        public virtual void _05GeneratingPotentialRecruitsForLevel2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05 Generating potential recruits for level 2", null, ((string[])(null)));
#line 101
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table15.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 102
 testRunner.Given("Some accounts exists in system", ((string)(null)), table15, "Given ");
#line 105
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Name",
                        "HP_range",
                        "Min_Attack_range",
                        "Defence_range",
                        "Speed_range",
                        "Attack_add_for_max"});
            table16.AddRow(new string[] {
                        "1",
                        "Goblin",
                        "18-22",
                        "8-12",
                        "8-12",
                        "8-10",
                        "4"});
            table16.AddRow(new string[] {
                        "2",
                        "Goblin",
                        "22-26",
                        "12-16",
                        "10-14",
                        "9-11",
                        "5"});
            table16.AddRow(new string[] {
                        "3",
                        "Goblin",
                        "26-34",
                        "16-24",
                        "12-16",
                        "10-12",
                        "7"});
            table16.AddRow(new string[] {
                        "4",
                        "Goblin",
                        "40-55",
                        "30-40",
                        "18-22",
                        "11-13",
                        "10"});
#line 106
 testRunner.And("Some mercenary templates", ((string)(null)), table16, "And ");
#line 112
 testRunner.And("Number of recruits is set to \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("The chance of getting level \'1\' mercenaries is set to \'10000\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.And("The chance of getting level \'2\' mercenaries is set to \'2500\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.And("The chance of getting level \'3\' mercenaries is set to \'1000\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.And("The chance of getting level \'4\' mercenaries is set to \'100\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.And("Randomzer for mercenary level will always return \'2400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.When("User will use refresh for mercenaries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
 testRunner.Then("Count of potential recruits generated should be \'2\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
 testRunner.And("All potential recruits should have set \'Name\' to \'Goblin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.And("All potential recruits should have set \'Level\' to \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("All potential recruits should have set value of \'Hp\' between \'22\' and \'26\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("All potential recruits should have set value of \'Attack_Min\' between \'12\' and \'16" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("All potential recruits should have set value of \'Attack_Max\' between \'17\' and \'21" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("All potential recruits should have set value of \'Defence\' between \'10\' and \'14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.And("All potential recruits should have set value of \'Speed\' between \'9\' and \'11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("06 Generating potential recruits for level 3", SourceLine=128)]
        public virtual void _06GeneratingPotentialRecruitsForLevel3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06 Generating potential recruits for level 3", null, ((string[])(null)));
#line 129
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table17.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 130
 testRunner.Given("Some accounts exists in system", ((string)(null)), table17, "Given ");
#line 133
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Name",
                        "HP_range",
                        "Min_Attack_range",
                        "Defence_range",
                        "Speed_range",
                        "Attack_add_for_max"});
            table18.AddRow(new string[] {
                        "1",
                        "Goblin",
                        "18-22",
                        "8-12",
                        "8-12",
                        "8-10",
                        "4"});
            table18.AddRow(new string[] {
                        "2",
                        "Goblin",
                        "22-26",
                        "12-16",
                        "10-14",
                        "9-11",
                        "5"});
            table18.AddRow(new string[] {
                        "3",
                        "Goblin",
                        "26-34",
                        "16-24",
                        "12-16",
                        "10-12",
                        "7"});
            table18.AddRow(new string[] {
                        "4",
                        "Goblin",
                        "40-55",
                        "30-40",
                        "18-22",
                        "11-13",
                        "10"});
#line 134
 testRunner.And("Some mercenary templates", ((string)(null)), table18, "And ");
#line 140
 testRunner.And("Number of recruits is set to \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("The chance of getting level \'1\' mercenaries is set to \'10000\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("The chance of getting level \'2\' mercenaries is set to \'2500\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.And("The chance of getting level \'3\' mercenaries is set to \'1000\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("The chance of getting level \'4\' mercenaries is set to \'100\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("Randomzer for mercenary level will always return \'999\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.When("User will use refresh for mercenaries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then("Count of potential recruits generated should be \'3\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 148
 testRunner.And("All potential recruits should have set \'Name\' to \'Goblin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("All potential recruits should have set \'Level\' to \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("All potential recruits should have set value of \'Hp\' between \'26\' and \'34\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("All potential recruits should have set value of \'Attack_Min\' between \'16\' and \'24" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("All potential recruits should have set value of \'Attack_Max\' between \'23\' and \'31" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("All potential recruits should have set value of \'Defence\' between \'12\' and \'16\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And("All potential recruits should have set value of \'Speed\' between \'10\' and \'12\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("07 Generating potential recruits for level 4", SourceLine=155)]
        public virtual void _07GeneratingPotentialRecruitsForLevel4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07 Generating potential recruits for level 4", null, ((string[])(null)));
#line 156
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table19.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 157
 testRunner.Given("Some accounts exists in system", ((string)(null)), table19, "Given ");
#line 160
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Name",
                        "HP_range",
                        "Min_Attack_range",
                        "Defence_range",
                        "Speed_range",
                        "Attack_add_for_max"});
            table20.AddRow(new string[] {
                        "1",
                        "Goblin",
                        "18-22",
                        "8-12",
                        "8-12",
                        "8-10",
                        "4"});
            table20.AddRow(new string[] {
                        "2",
                        "Goblin",
                        "22-26",
                        "12-16",
                        "10-14",
                        "9-11",
                        "5"});
            table20.AddRow(new string[] {
                        "3",
                        "Goblin",
                        "26-34",
                        "16-24",
                        "12-16",
                        "10-12",
                        "7"});
            table20.AddRow(new string[] {
                        "4",
                        "Goblin",
                        "40-55",
                        "30-40",
                        "18-22",
                        "11-13",
                        "10"});
#line 161
 testRunner.And("Some mercenary templates", ((string)(null)), table20, "And ");
#line 167
 testRunner.And("Number of recruits is set to \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.And("The chance of getting level \'1\' mercenaries is set to \'10000\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
 testRunner.And("The chance of getting level \'2\' mercenaries is set to \'2500\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.And("The chance of getting level \'3\' mercenaries is set to \'1000\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.And("The chance of getting level \'4\' mercenaries is set to \'100\' of \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("Randomzer for mercenary level will always return \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.When("User will use refresh for mercenaries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
 testRunner.Then("Count of potential recruits generated should be \'7\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 175
 testRunner.And("All potential recruits should have set \'Name\' to \'Goblin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("All potential recruits should have set \'Level\' to \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.And("All potential recruits should have set value of \'Hp\' between \'40\' and \'55\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.And("All potential recruits should have set value of \'Attack_Min\' between \'30\' and \'40" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.And("All potential recruits should have set value of \'Attack_Max\' between \'40\' and \'50" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
 testRunner.And("All potential recruits should have set value of \'Defence\' between \'18\' and \'22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
 testRunner.And("All potential recruits should have set value of \'Speed\' between \'11\' and \'13\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("08 Generating potential recruits for level 1 for many first level mercenaries", SourceLine=182)]
        public virtual void _08GeneratingPotentialRecruitsForLevel1ForManyFirstLevelMercenaries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08 Generating potential recruits for level 1 for many first level mercenaries", null, ((string[])(null)));
#line 183
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table21.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 184
 testRunner.Given("Some accounts exists in system", ((string)(null)), table21, "Given ");
#line 187
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level",
                        "Name",
                        "HP_range",
                        "Min_Attack_range",
                        "Defence_range",
                        "Speed_range",
                        "Attack_add_for_max"});
            table22.AddRow(new string[] {
                        "1",
                        "Goblin",
                        "18-22",
                        "8-12",
                        "8-12",
                        "8-10",
                        "4"});
            table22.AddRow(new string[] {
                        "1",
                        "Elf",
                        "22-26",
                        "12-16",
                        "10-14",
                        "9-11",
                        "4"});
            table22.AddRow(new string[] {
                        "1",
                        "Orc",
                        "26-34",
                        "16-24",
                        "12-16",
                        "10-12",
                        "4"});
#line 188
 testRunner.And("Some mercenary templates", ((string)(null)), table22, "And ");
#line 193
 testRunner.And("Number of recruits is set to \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("The chance of getting level \'1\' mercenaries is set to \'100\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.And("Randomzer for mercenary level will always return \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.When("User will use refresh for mercenaries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 197
 testRunner.Then("Count of potential recruits generated should be \'100\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 198
 testRunner.And("There are some potential recruits with \'Name\' equal to \'Goblin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
 testRunner.And("There are some potential recruits with \'Name\' equal to \'Elf\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("There are some potential recruits with \'Name\' equal to \'Orc\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.And("All potential recruits should have set \'Level\' to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("09 Successfully convincing level 1 recruit", SourceLine=202)]
        public virtual void _09SuccessfullyConvincingLevel1Recruit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("09 Successfully convincing level 1 recruit", null, ((string[])(null)));
#line 203
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table23.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 204
 testRunner.Given("Some accounts exists in system", ((string)(null)), table23, "Given ");
#line 207
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Level",
                        "Name",
                        "Hp",
                        "Attack_Min",
                        "Attack_Max",
                        "Defence",
                        "Speed"});
            table24.AddRow(new string[] {
                        "Elf_A",
                        "1",
                        "Elf",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5"});
#line 208
 testRunner.And("There as some recruits", ((string)(null)), table24, "And ");
#line 211
 testRunner.And("The chance of convincing level \'1\' recruits is set to \'100\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("The chance of convincing level \'2\' recruits is set to \'50\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.And("The chance of convincing level \'3\' recruits is set to \'20\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("The chance of convincing level \'4\' recruits is set to \'10\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("Randomzer for convincing recruits will always return \'90\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.When("Logged user will try to convince recruit with ID \'Elf_A\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 217
 testRunner.Then("Logged account id is \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table25.AddRow(new string[] {
                        "Elf_A",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5",
                        ""});
#line 218
 testRunner.And("Logged account should have mercenaries", ((string)(null)), table25, "And ");
#line 221
 testRunner.And("Count of potential recruits generated should be \'0\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("10 Failing to convince level 1 recruit", SourceLine=222)]
        public virtual void _10FailingToConvinceLevel1Recruit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10 Failing to convince level 1 recruit", null, ((string[])(null)));
#line 223
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table26.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 224
 testRunner.Given("Some accounts exists in system", ((string)(null)), table26, "Given ");
#line 227
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Level",
                        "Name",
                        "Hp",
                        "Attack_Min",
                        "Attack_Max",
                        "Defence",
                        "Speed"});
            table27.AddRow(new string[] {
                        "Elf_A",
                        "1",
                        "Elf",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5"});
#line 228
 testRunner.And("There as some recruits", ((string)(null)), table27, "And ");
#line 231
 testRunner.And("The chance of convincing level \'1\' recruits is set to \'70\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.And("The chance of convincing level \'2\' recruits is set to \'50\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
 testRunner.And("The chance of convincing level \'3\' recruits is set to \'20\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.And("The chance of convincing level \'4\' recruits is set to \'10\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("Randomzer for convincing recruits will always return \'80\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.When("Logged user will try to convince recruit with ID \'Elf_A\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then("Logged account id is \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
#line 238
 testRunner.And("Logged account should have mercenaries", ((string)(null)), table28, "And ");
#line 240
 testRunner.And("Count of potential recruits generated should be \'1\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("11 Successfully convincing level 2 recruit", SourceLine=241)]
        public virtual void _11SuccessfullyConvincingLevel2Recruit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11 Successfully convincing level 2 recruit", null, ((string[])(null)));
#line 242
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table29.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 243
 testRunner.Given("Some accounts exists in system", ((string)(null)), table29, "Given ");
#line 246
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Level",
                        "Name",
                        "Hp",
                        "Attack_Min",
                        "Attack_Max",
                        "Defence",
                        "Speed"});
            table30.AddRow(new string[] {
                        "Elf_A",
                        "2",
                        "Elf",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5"});
#line 247
 testRunner.And("There as some recruits", ((string)(null)), table30, "And ");
#line 250
 testRunner.And("The chance of convincing level \'1\' recruits is set to \'100\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.And("The chance of convincing level \'2\' recruits is set to \'50\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.And("The chance of convincing level \'3\' recruits is set to \'20\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
 testRunner.And("The chance of convincing level \'4\' recruits is set to \'10\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
 testRunner.And("Randomzer for convincing recruits will always return \'49\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
 testRunner.When("Logged user will try to convince recruit with ID \'Elf_A\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 256
 testRunner.Then("Logged account id is \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table31.AddRow(new string[] {
                        "Elf_A",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5",
                        ""});
#line 257
 testRunner.And("Logged account should have mercenaries", ((string)(null)), table31, "And ");
#line 260
 testRunner.And("Count of potential recruits generated should be \'0\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("12 Successfully convincing level 3 recruit", SourceLine=261)]
        public virtual void _12SuccessfullyConvincingLevel3Recruit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12 Successfully convincing level 3 recruit", null, ((string[])(null)));
#line 262
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table32.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 263
 testRunner.Given("Some accounts exists in system", ((string)(null)), table32, "Given ");
#line 266
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Level",
                        "Name",
                        "Hp",
                        "Attack_Min",
                        "Attack_Max",
                        "Defence",
                        "Speed"});
            table33.AddRow(new string[] {
                        "Elf_A",
                        "3",
                        "Elf",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5"});
#line 267
 testRunner.And("There as some recruits", ((string)(null)), table33, "And ");
#line 270
 testRunner.And("The chance of convincing level \'1\' recruits is set to \'100\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
 testRunner.And("The chance of convincing level \'2\' recruits is set to \'50\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.And("The chance of convincing level \'3\' recruits is set to \'20\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
 testRunner.And("The chance of convincing level \'4\' recruits is set to \'10\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.And("Randomzer for convincing recruits will always return \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.When("Logged user will try to convince recruit with ID \'Elf_A\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
 testRunner.Then("Logged account id is \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table34.AddRow(new string[] {
                        "Elf_A",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5",
                        ""});
#line 277
 testRunner.And("Logged account should have mercenaries", ((string)(null)), table34, "And ");
#line 280
 testRunner.And("Count of potential recruits generated should be \'0\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("13 Successfully convincing level 4 recruit", SourceLine=281)]
        public virtual void _13SuccessfullyConvincingLevel4Recruit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13 Successfully convincing level 4 recruit", null, ((string[])(null)));
#line 282
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table35.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 283
 testRunner.Given("Some accounts exists in system", ((string)(null)), table35, "Given ");
#line 286
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Level",
                        "Name",
                        "Hp",
                        "Attack_Min",
                        "Attack_Max",
                        "Defence",
                        "Speed"});
            table36.AddRow(new string[] {
                        "Elf_A",
                        "4",
                        "Elf",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5"});
#line 287
 testRunner.And("There as some recruits", ((string)(null)), table36, "And ");
#line 290
 testRunner.And("The chance of convincing level \'1\' recruits is set to \'100\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
 testRunner.And("The chance of convincing level \'2\' recruits is set to \'50\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
 testRunner.And("The chance of convincing level \'3\' recruits is set to \'20\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
 testRunner.And("The chance of convincing level \'4\' recruits is set to \'10\' of \'100\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
 testRunner.And("Randomzer for convincing recruits will always return \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.When("Logged user will try to convince recruit with ID \'Elf_A\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 296
 testRunner.Then("Logged account id is \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "MaxHp",
                        "Hp",
                        "Min_Att",
                        "Max_Att",
                        "Def",
                        "Speed",
                        "Skills"});
            table37.AddRow(new string[] {
                        "Elf_A",
                        "Elf",
                        "20",
                        "20",
                        "10",
                        "20",
                        "10",
                        "5",
                        ""});
#line 297
 testRunner.And("Logged account should have mercenaries", ((string)(null)), table37, "And ");
#line 300
 testRunner.And("Count of potential recruits generated should be \'0\' for user with ID \'ID_1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
