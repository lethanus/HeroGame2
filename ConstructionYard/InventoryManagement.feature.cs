// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ConstructionYard
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Inventory management", SourceFile="InventoryManagement.feature", SourceLine=0)]
    public partial class InventoryManagementFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InventoryManagement.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Inventory management", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01 Adding few items to empty inventory", new string[] {
                "mytag"}, SourceLine=4)]
        public virtual void _01AddingFewItemsToEmptyInventory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 Adding few items to empty inventory", null, new string[] {
                        "mytag"});
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table1.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 6
 testRunner.Given("Some accounts exists in system", ((string)(null)), table1, "Given ");
#line 9
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Amount",
                        "Category"});
#line 10
 testRunner.And("Inventory already contains items below", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Category"});
            table3.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "Trophy"});
#line 12
 testRunner.And("Items dictionary contains items below", ((string)(null)), table3, "And ");
#line 15
 testRunner.When("Adding item with ID \'TR_1\' with amount \'5\' to inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Amount",
                        "Category"});
            table4.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "5",
                        "Trophy"});
#line 16
 testRunner.Then("Inventory should have items below", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02 Adding few items to not empty inventory", SourceLine=20)]
        public virtual void _02AddingFewItemsToNotEmptyInventory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 Adding few items to not empty inventory", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table5.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 22
 testRunner.Given("Some accounts exists in system", ((string)(null)), table5, "Given ");
#line 25
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Amount",
                        "Category"});
            table6.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "5",
                        "Trophy"});
#line 26
 testRunner.And("Inventory already contains items below", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Category"});
            table7.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "Trophy"});
#line 29
 testRunner.And("Items dictionary contains items below", ((string)(null)), table7, "And ");
#line 32
 testRunner.When("Adding item with ID \'TR_1\' with amount \'5\' to inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Amount",
                        "Category"});
            table8.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "10",
                        "Trophy"});
#line 33
 testRunner.Then("Inventory should have items below", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03 Reducing amuont of items", SourceLine=37)]
        public virtual void _03ReducingAmuontOfItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03 Reducing amuont of items", null, ((string[])(null)));
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table9.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 39
 testRunner.Given("Some accounts exists in system", ((string)(null)), table9, "Given ");
#line 42
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Amount",
                        "Category"});
            table10.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "10",
                        "Trophy"});
#line 43
 testRunner.And("Inventory already contains items below", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Category"});
            table11.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "Trophy"});
#line 46
 testRunner.And("Items dictionary contains items below", ((string)(null)), table11, "And ");
#line 49
 testRunner.When("Removing item with ID \'TR_1\' with amount \'5\' to inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Amount",
                        "Category"});
            table12.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "5",
                        "Trophy"});
#line 50
 testRunner.Then("Inventory should have items below", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("04 Removing items", SourceLine=54)]
        public virtual void _04RemovingItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04 Removing items", null, ((string[])(null)));
#line 55
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Login",
                        "Password"});
            table13.AddRow(new string[] {
                        "ID_1",
                        "test",
                        "test"});
#line 56
 testRunner.Given("Some accounts exists in system", ((string)(null)), table13, "Given ");
#line 59
 testRunner.And("I try to login for \'test\' and password \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Amount",
                        "Category"});
            table14.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "10",
                        "Trophy"});
#line 60
 testRunner.And("Inventory already contains items below", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Category"});
            table15.AddRow(new string[] {
                        "TR_1",
                        "Rat tail",
                        "Trophy"});
#line 63
 testRunner.And("Items dictionary contains items below", ((string)(null)), table15, "And ");
#line 66
 testRunner.When("Removing item with ID \'TR_1\' with amount \'10\' to inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Amount",
                        "Category"});
#line 67
 testRunner.Then("Inventory should have items below", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
